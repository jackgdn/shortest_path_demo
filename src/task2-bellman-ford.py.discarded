from ast import literal_eval
from pathlib import Path

INF = float("inf")


def bellman_ford(adjacency_matrix, start_node, node_count):
    distances = [INF] * node_count
    distances[start_node] = 0
    paths = [None] * node_count
    paths[start_node] = [start_node]

    for _ in range(node_count - 1):
        for u in range(node_count):
            for v in range(node_count):
                w = adjacency_matrix[u][v]
                if distances[u] != INF and distances[u] + w < distances[v]:
                    distances[v] = distances[u] + w
                    paths[v] = paths[u] + [v]

    return distances, paths


def main():
    task_file_path = Path(__file__).parent.parent / Path("tasks") / "task1.txt"
    with open(task_file_path, "r") as task_file:
        adjacency_matrix = [
            [INF if isinstance(x, str) else x for x in row]
            for row in literal_eval(task_file.read())
        ]

    node_count = len(adjacency_matrix)
    distances, paths = bellman_ford(adjacency_matrix, 0, node_count)

    output_file_path = (
        Path(__file__).parent.parent / Path("output") / "task2-output.txt"
    )
    output_file = open(output_file_path, "w")
    print("Dest\tDist\tPath")
    output_file.write("Dest\tDist\tPath\n")
    for node in range(node_count):
        print(
            f"{'C' + str(node + 1):<8}{distances[node]:<8}{'->'.join(map(lambda x: 'C' + str(x + 1), paths[node]))}"
        )
        output_file.write(
            f"{'C' + str(node + 1):<8}{distances[node]:<8}{'->'.join(map(lambda x: 'C' + str(x + 1), paths[node]))}\n"
        )
    output_file.close()


if __name__ == "__main__":
    main()
